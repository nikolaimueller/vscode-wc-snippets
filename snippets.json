{
	"Custom Element Class v1": {
		"prefix": "cec",
		"body": [
			"// See:   https://developer.mozilla.org/en-US/docs/Web/Web_Components",
			"",
			"const template = document.createElement('template');",
			"template.innerHTML = `",
			"<h1>",
			"\t<p>Template comes here.</p>",
			"</h1>",
			"`;",
			"",
			"export default class $TM_FILENAME_BASE extends HTMLElement {",
			"\tstatic get tag() { return '${2:}' };",
			"\tstatic get STYLESHEET_LINK() { return './$TM_FILENAME_BASE.css' }",
			"",
			"\tconstructor() {",
			"\t\tsuper()",
			"",
			"\t\tlet shadow = this.attachShadow({mode:'open'});",
			"",
			"\t\t// Add Component StyleSheet-Link",
			"\t\tthis.refLinkStyle = document.createElement('link');",
			"\t\tthis.refLinkStyle.setAttribute('rel', 'stylesheet');",
			"\t\tthis.refLinkStyle.setAttribute('href', $TM_FILENAME_BASE.STYLESHEET_LINK);",
			"\t\tshadow.appendChild(this.refLinkStyle);",
			"",
			"\t\t// Add template content",
			"\t\tshadow.appendChild(template.content.cloneNode(true));",
			"\t}",
			"",
			"\t// *** Livecycle callbacks  ***",
			"\t// see:  https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks",
			"",
			"\t// Invoked each time the custom element is appended into a document-connected element.",
			"\tconnectedCallback() {",
			"\t\tconsole.log('!! connectedCallback(): NOT IMPLEMENTED !!')",
			"\t\tif (this.isConnected) {",
			"\t\t\t// implement your callback here.",
			"\t\t}",
			"\t}",
			"",
			"\t// Invoked each time the custom element is disconnected from the document's DOM.",
			"\tdisconnectedCallback() {",
			"\t\tconsole.log('!! disconnectedCallback(): NOT IMPLEMENTED !!')",
			"\t}",
			"",
			"\t// Invoked each time the custom element is moved to a new document.",
			"\tadoptedCallback() {",
			"\t\tconsole.log('!! adoptedCallback(): NOT IMPLEMENTED !!')",
			"\t}",
			"",
			"\t// Invoked each time one of the custom element's attributes is added, removed, or changed.",
			"\tattributeChangedCallback(name, oldValue, newValue) {",
			"\t\tconsole.log('!! attributeChangedCallback(): NOT IMPLEMENTED !!')",
			"\t}",
			"}",
			"// Register custom element.",
			"customElements.define($TM_FILENAME_BASE.tag, $TM_FILENAME_BASE);"
		],
		"description": "Class for custom element v1."
	}
	,
	"Style for Custom Element v1": {
		"prefix": "ces",
		"body": [
			"/* *** CSS pseudo-classes *** */",
			":host {",
			"\t/* Selects the shadow host of the shadow DOM containing the CSS it is used inside. */",
			"\tdisplay: block;",
			"\tborder: 1px solid red; /* Drop this line if you don't like red boxes ;-) */",
			"}",
			"",
			"/* :defined ",
			"\tMatches any element that is defined, including built in elements and custom elements defined with CustomElementRegistry.define()).",
			"*/",
			"",
			"/* :host() ",
			"\tSelects the shadow host of the shadow DOM containing the CSS it is used inside (so you can select a custom element from inside its shadow DOM) � but only if the selector given as the function's parameter matches the shadow host.",
			"*/",
			"",
			"/* :host-context() ",
			"\tSelects the shadow host of the shadow DOM containing the CSS it is used inside (so you can select a custom element from inside its shadow DOM) � but only if the selector given as the function's parameter matches the shadow host's ancestor(s) in the place it sits inside the DOM hierarchy.",
			"*/",
			"",
			"/* *** CSS pseudo-elements ***",
			"\tPseudo-elements relating specifically to custom elements:",
			"*/",
			"/* ::part",
			"\tRepresents any element within a shadow tree that has a matching part attribute.",
			"*/",
			"/* ::slotted",
			"\tMatches any content that is inserted into a slot.",
			"*/"
		]
	}
}